#!/usr/bin/env ts-node

import * as dotenv from 'dotenv';
dotenv.config({ path: '.env' });

import chalk from 'chalk';
import commander from 'commander';
import { readFile, writeFile } from 'fs/promises';
import glob from 'glob-promise';
import { join } from 'path';
import spaceTrim from 'spacetrim';
import { promptTemplatePipelineStringToJson } from '../../src/conversion/promptTemplatePipelineStringToJson';
import { addAutoGeneratedSection } from '../../src/utils/markdown/addAutoGeneratedSection';
import { commit } from '../utils/autocommit/commit';
import { isWorkingTreeClean } from '../utils/autocommit/isWorkingTreeClean';

if (process.cwd() !== join(__dirname, '../..')) {
    console.error(chalk.red(`CWD must be root of the project`));
    process.exit(1);
}

const PTBK_SAMPLES_DIR = join(process.cwd(), 'samples/templates');

const program = new commander.Command();
program.option('--commit', `Autocommit changes`, false);
program.parse(process.argv);
const { commit: isCommited } = program.opts();

generateSampleGraphs({ isCommited })
    .catch((error) => {
        console.error(chalk.bgRed(error.name));
        console.error(error);
        process.exit(1);
    })
    .then(() => {
        process.exit(0);
    });

async function generateSampleGraphs({ isCommited }: { isCommited: boolean }) {
    console.info(`🏭📖  Generate samples mermaid graphs -> .ptbk.md`);

    if (isCommited && !(await isWorkingTreeClean(process.cwd()))) {
        throw new Error(`Working tree is not clean`);
    }

    for (const ptbkMarkdownFilePath of await glob(join(PTBK_SAMPLES_DIR, '*.ptbk.md').split('\\').join('/'))) {
        console.info(`📖  Generating mermaid graph in ${ptbkMarkdownFilePath}`);
        let ptbkMarkdown = await readFile(ptbkMarkdownFilePath, 'utf-8');

        try {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const ptbkJson = promptTemplatePipelineStringToJson(ptbkMarkdown as any /* <- TODO: Remove any */);

            const ptbkMermaid = spaceTrim(`

                %% 🔮 Tip: Open this on GitHub or in the VSCode website to see the mermaid graph visually

                flowchart LR
                    subgraph Promptbook execution
                        direction TB
                        start[Start]
                        input_params[Input Parameters] --> prompt_pipeline[Prompt Template Pipeline]
                        prompt_pipeline --> output_params[Output Parameters]

                        prompt_pipeline --> execution_tools[Execution Tools]
                        execution_tools -.-> LLMs[Natural Execution Tools]
                        execution_tools -.-> scripts[Script Execution Tools]
                        execution_tools -.-> user_interface[User Interface Tools]
                        execution_tools --> jokers[Jokers]
                        execution_tools --> expectations[Expectations]

                        LLMs --> external_models[External LLM Sources]
                        scripts --> scripting_lang[Supported Scripting Languages]
                        user_interface --> UI_methods[User Interface Methods]

                        jokers --> joker_handling[Joker Handling]
                        expectations --> expectation_validation[Expectation Validation]
                        output_params --> postprocessing[Postprocessing Functions]
                        postprocessing -->result[Execution Report]

                        result --> completion[Execution Complete]
                    end

                    start --> input_params
                    completion -->|Feedback & Iteration| start

            `);

            const ptbkMermaidBlock = spaceTrim(
                (block) => `
                \`\`\`mermaid
                ${block(ptbkMermaid)}
                \`\`\`
            `,
            );

            ptbkMarkdown = addAutoGeneratedSection(ptbkMarkdown, {
                sectionName: 'Graph',
                sectionContent: ptbkMermaidBlock,
            });

            await writeFile(ptbkMarkdownFilePath, ptbkMarkdown);
        } catch (error) {
            if (!(error instanceof Error)) {
                throw error;
            }

            console.info(chalk.bgGray('========================='));
            console.info(chalk.red(`Error in ${ptbkMarkdownFilePath}`));
            console.error(chalk.bgRed(error.name));
            console.error(error);
            console.info(chalk.bgGray('========================='));
        }
    }

    if (isCommited) {
        await commit(PTBK_SAMPLES_DIR, `📖 Generate samples mermaid graphs -> .ptbk.md`);
    }

    console.info(`[ Done 📖  Generate samples mermaid graphs -> .ptbk.md]`);
}

/**
 * TODO: Maybe use some Mermaid library instead of string templating
 */
