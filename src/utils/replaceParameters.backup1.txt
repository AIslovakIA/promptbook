import { string_name, string_template } from '.././types/typeAliases';
import { Parameters } from '../types/Parameters';
import { isValidJsonString } from './isValidJsonString';

/**
 * Replaces parameters in template with values from parameters object
 *
 * @param template the template with parameters in {curly} braces
 * @param parameters the object with parameters
 * @returns the template with replaced parameters
 */
export function replaceParameters(template: string_template, parameters: Parameters): string {
    let result = '';
    let openedParamName: Array<string> = [];

    // Note: We dont want parameters with index signature here because it wont be compatible with PromptTemplateParameters which has its own reasons to not have index signature
    const parametersChecked = parameters as Record<
        string_name,
        string
    >; /* <- TODO: Make here some util validateTemplateParameters */

    for (const char of template.split('')) {
        if (char === '{') {
            level++;

            if (openedParamName === null) {
                openedParamName = '';
            } else if (
                // Note: This indicates that we are probbably dealing with some JSON or other structure in {...}
                openedParamName.includes('"') ||
                openedParamName.includes("'") ||
                openedParamName.includes(',') ||
                openedParamName.includes('\n')
            ) {
                openedParamName += char;
            } else {
                openedParamName += char;
            }
        } else if (char === '}') {
            level--;

            if (level >= 1) {
                // Note: This indicates that we are probbably dealing with some JSON or other structure in {...}
                openedParamName += char;
                continue;
            }

            if (openedParamName === null) {
                throw new Error(`Parameter is not opened`);
            }

            if (!isValidJsonString(`{${openedParamName}}`)) {
                if (parametersChecked[openedParamName] === undefined) {
                    throw new Error(`Parameter {${openedParamName}} is not defined`);
                }
                result += parametersChecked[openedParamName];
            } else {
                result += `{${openedParamName}}`;
            }

            openedParamName = null;
        } else if (openedParamName === null) {
            result += char;
        } else if (openedParamName !== null) {
            openedParamName += char;
        }
    }

    if (openedParamName !== null) {
        throw new Error(`Parameter is not closed`);
    }

    return result;
}

/**
 * TODO: [ðŸ§ ] More advanced templating
 * TODO: [ðŸ§ ] Maybe use some template engine / library not own simple implementation
 */
